// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tia.proto

package thermalImagingAnalysis

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing a tag for the server to log.
type ThermalImagingAnalysisRequest struct {
	DataArray            []float64 `protobuf:"fixed64,1,rep,packed,name=dataArray,proto3" json:"dataArray,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ThermalImagingAnalysisRequest) Reset()         { *m = ThermalImagingAnalysisRequest{} }
func (m *ThermalImagingAnalysisRequest) String() string { return proto.CompactTextString(m) }
func (*ThermalImagingAnalysisRequest) ProtoMessage()    {}
func (*ThermalImagingAnalysisRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_87ddbe9791123949, []int{0}
}

func (m *ThermalImagingAnalysisRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ThermalImagingAnalysisRequest.Unmarshal(m, b)
}
func (m *ThermalImagingAnalysisRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ThermalImagingAnalysisRequest.Marshal(b, m, deterministic)
}
func (m *ThermalImagingAnalysisRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThermalImagingAnalysisRequest.Merge(m, src)
}
func (m *ThermalImagingAnalysisRequest) XXX_Size() int {
	return xxx_messageInfo_ThermalImagingAnalysisRequest.Size(m)
}
func (m *ThermalImagingAnalysisRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ThermalImagingAnalysisRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ThermalImagingAnalysisRequest proto.InternalMessageInfo

func (m *ThermalImagingAnalysisRequest) GetDataArray() []float64 {
	if m != nil {
		return m.DataArray
	}
	return nil
}

// The response message containing the dataArray, and the errorMesage if any.
type ThermalImagingAnalysisReply struct {
	Level                string   `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	AnalysisReport       string   `protobuf:"bytes,2,opt,name=analysisReport,proto3" json:"analysisReport,omitempty"`
	ErrorMessage         string   `protobuf:"bytes,3,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ThermalImagingAnalysisReply) Reset()         { *m = ThermalImagingAnalysisReply{} }
func (m *ThermalImagingAnalysisReply) String() string { return proto.CompactTextString(m) }
func (*ThermalImagingAnalysisReply) ProtoMessage()    {}
func (*ThermalImagingAnalysisReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_87ddbe9791123949, []int{1}
}

func (m *ThermalImagingAnalysisReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ThermalImagingAnalysisReply.Unmarshal(m, b)
}
func (m *ThermalImagingAnalysisReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ThermalImagingAnalysisReply.Marshal(b, m, deterministic)
}
func (m *ThermalImagingAnalysisReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThermalImagingAnalysisReply.Merge(m, src)
}
func (m *ThermalImagingAnalysisReply) XXX_Size() int {
	return xxx_messageInfo_ThermalImagingAnalysisReply.Size(m)
}
func (m *ThermalImagingAnalysisReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ThermalImagingAnalysisReply.DiscardUnknown(m)
}

var xxx_messageInfo_ThermalImagingAnalysisReply proto.InternalMessageInfo

func (m *ThermalImagingAnalysisReply) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *ThermalImagingAnalysisReply) GetAnalysisReport() string {
	if m != nil {
		return m.AnalysisReport
	}
	return ""
}

func (m *ThermalImagingAnalysisReply) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*ThermalImagingAnalysisRequest)(nil), "thermalImagingAnalysis.thermalImagingAnalysisRequest")
	proto.RegisterType((*ThermalImagingAnalysisReply)(nil), "thermalImagingAnalysis.thermalImagingAnalysisReply")
}

func init() { proto.RegisterFile("tia.proto", fileDescriptor_87ddbe9791123949) }

var fileDescriptor_87ddbe9791123949 = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0xc9, 0x4c, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x2b, 0xc9, 0x48, 0x2d, 0xca, 0x4d, 0xcc, 0xf1, 0xcc,
	0x4d, 0x4c, 0xcf, 0xcc, 0x4b, 0x77, 0xcc, 0x4b, 0xcc, 0xa9, 0x2c, 0xce, 0x2c, 0x56, 0xb2, 0xe5,
	0x92, 0xc5, 0x2e, 0x13, 0x94, 0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x22, 0x24, 0xc3, 0xc5, 0x99, 0x92,
	0x58, 0x92, 0xe8, 0x58, 0x54, 0x94, 0x58, 0x29, 0xc1, 0xa8, 0xc0, 0xac, 0xc1, 0x18, 0x84, 0x10,
	0x50, 0xaa, 0xe7, 0x92, 0xc6, 0xa5, 0xbd, 0x20, 0xa7, 0x52, 0x48, 0x84, 0x8b, 0x35, 0x27, 0xb5,
	0x2c, 0x35, 0x47, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xc2, 0x11, 0x52, 0xe3, 0xe2, 0x4b,
	0x44, 0x28, 0xcb, 0x2f, 0x2a, 0x91, 0x60, 0x02, 0x4b, 0xa3, 0x89, 0x0a, 0x29, 0x71, 0xf1, 0xa4,
	0x16, 0x15, 0xe5, 0x17, 0xf9, 0xa6, 0x16, 0x17, 0x27, 0xa6, 0xa7, 0x4a, 0x30, 0x83, 0x55, 0xa1,
	0x88, 0x19, 0x2d, 0x67, 0xc4, 0xe5, 0x81, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0xa1, 0x56,
	0x46, 0x2e, 0x51, 0xb0, 0x58, 0x55, 0x6a, 0x08, 0x8a, 0x42, 0x21, 0x53, 0x3d, 0xec, 0x3a, 0xf5,
	0xf0, 0x86, 0x88, 0x94, 0x31, 0xa9, 0xda, 0x0a, 0x72, 0x2a, 0x95, 0x18, 0x92, 0xd8, 0xc0, 0x11,
	0x61, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xf0, 0xff, 0x59, 0xa0, 0x95, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ThermalImagingAnalysisServiceClient is the client API for ThermalImagingAnalysisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ThermalImagingAnalysisServiceClient interface {
	// Using a dataArray to analyze
	AnalyzeThermalImaging(ctx context.Context, in *ThermalImagingAnalysisRequest, opts ...grpc.CallOption) (*ThermalImagingAnalysisReply, error)
}

type thermalImagingAnalysisServiceClient struct {
	cc *grpc.ClientConn
}

func NewThermalImagingAnalysisServiceClient(cc *grpc.ClientConn) ThermalImagingAnalysisServiceClient {
	return &thermalImagingAnalysisServiceClient{cc}
}

func (c *thermalImagingAnalysisServiceClient) AnalyzeThermalImaging(ctx context.Context, in *ThermalImagingAnalysisRequest, opts ...grpc.CallOption) (*ThermalImagingAnalysisReply, error) {
	out := new(ThermalImagingAnalysisReply)
	err := c.cc.Invoke(ctx, "/thermalImagingAnalysis.thermalImagingAnalysisService/AnalyzeThermalImaging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThermalImagingAnalysisServiceServer is the server API for ThermalImagingAnalysisService service.
type ThermalImagingAnalysisServiceServer interface {
	// Using a dataArray to analyze
	AnalyzeThermalImaging(context.Context, *ThermalImagingAnalysisRequest) (*ThermalImagingAnalysisReply, error)
}

// UnimplementedThermalImagingAnalysisServiceServer can be embedded to have forward compatible implementations.
type UnimplementedThermalImagingAnalysisServiceServer struct {
}

func (*UnimplementedThermalImagingAnalysisServiceServer) AnalyzeThermalImaging(ctx context.Context, req *ThermalImagingAnalysisRequest) (*ThermalImagingAnalysisReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeThermalImaging not implemented")
}

func RegisterThermalImagingAnalysisServiceServer(s *grpc.Server, srv ThermalImagingAnalysisServiceServer) {
	s.RegisterService(&_ThermalImagingAnalysisService_serviceDesc, srv)
}

func _ThermalImagingAnalysisService_AnalyzeThermalImaging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThermalImagingAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThermalImagingAnalysisServiceServer).AnalyzeThermalImaging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thermalImagingAnalysis.thermalImagingAnalysisService/AnalyzeThermalImaging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThermalImagingAnalysisServiceServer).AnalyzeThermalImaging(ctx, req.(*ThermalImagingAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ThermalImagingAnalysisService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "thermalImagingAnalysis.thermalImagingAnalysisService",
	HandlerType: (*ThermalImagingAnalysisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnalyzeThermalImaging",
			Handler:    _ThermalImagingAnalysisService_AnalyzeThermalImaging_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tia.proto",
}
