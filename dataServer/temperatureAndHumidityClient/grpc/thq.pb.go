// Code generated by protoc-gen-gitcode_go. DO NOT EDIT.
// source: thq.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type TemperatureAndHumidityRequest struct {
	Datetime             string   `protobuf:"bytes,1,opt,name=datetime,proto3" json:"datetime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TemperatureAndHumidityRequest) Reset()         { *m = TemperatureAndHumidityRequest{} }
func (m *TemperatureAndHumidityRequest) String() string { return proto.CompactTextString(m) }
func (*TemperatureAndHumidityRequest) ProtoMessage()    {}
func (*TemperatureAndHumidityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40cb4f8299f01d9c, []int{0}
}

func (m *TemperatureAndHumidityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TemperatureAndHumidityRequest.Unmarshal(m, b)
}
func (m *TemperatureAndHumidityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TemperatureAndHumidityRequest.Marshal(b, m, deterministic)
}
func (m *TemperatureAndHumidityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TemperatureAndHumidityRequest.Merge(m, src)
}
func (m *TemperatureAndHumidityRequest) XXX_Size() int {
	return xxx_messageInfo_TemperatureAndHumidityRequest.Size(m)
}
func (m *TemperatureAndHumidityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TemperatureAndHumidityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TemperatureAndHumidityRequest proto.InternalMessageInfo

func (m *TemperatureAndHumidityRequest) GetDatetime() string {
	if m != nil {
		return m.Datetime
	}
	return ""
}

type TemperatureAndHumidityInfo struct {
	Temperature          float64  `protobuf:"fixed64,1,opt,name=temperature,proto3" json:"temperature,omitempty"`
	Humidity             float64  `protobuf:"fixed64,2,opt,name=humidity,proto3" json:"humidity,omitempty"`
	Datetime             string   `protobuf:"bytes,3,opt,name=datetime,proto3" json:"datetime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TemperatureAndHumidityInfo) Reset()         { *m = TemperatureAndHumidityInfo{} }
func (m *TemperatureAndHumidityInfo) String() string { return proto.CompactTextString(m) }
func (*TemperatureAndHumidityInfo) ProtoMessage()    {}
func (*TemperatureAndHumidityInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_40cb4f8299f01d9c, []int{1}
}

func (m *TemperatureAndHumidityInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TemperatureAndHumidityInfo.Unmarshal(m, b)
}
func (m *TemperatureAndHumidityInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TemperatureAndHumidityInfo.Marshal(b, m, deterministic)
}
func (m *TemperatureAndHumidityInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TemperatureAndHumidityInfo.Merge(m, src)
}
func (m *TemperatureAndHumidityInfo) XXX_Size() int {
	return xxx_messageInfo_TemperatureAndHumidityInfo.Size(m)
}
func (m *TemperatureAndHumidityInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TemperatureAndHumidityInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TemperatureAndHumidityInfo proto.InternalMessageInfo

func (m *TemperatureAndHumidityInfo) GetTemperature() float64 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func (m *TemperatureAndHumidityInfo) GetHumidity() float64 {
	if m != nil {
		return m.Humidity
	}
	return 0
}

func (m *TemperatureAndHumidityInfo) GetDatetime() string {
	if m != nil {
		return m.Datetime
	}
	return ""
}

// The response message containing the greetings
type TemperatureAndHumidityReply struct {
	ThInfo               []*TemperatureAndHumidityInfo `protobuf:"bytes,1,rep,name=thInfo,proto3" json:"thInfo,omitempty"`
	ErrorMessage         string                        `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *TemperatureAndHumidityReply) Reset()         { *m = TemperatureAndHumidityReply{} }
func (m *TemperatureAndHumidityReply) String() string { return proto.CompactTextString(m) }
func (*TemperatureAndHumidityReply) ProtoMessage()    {}
func (*TemperatureAndHumidityReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_40cb4f8299f01d9c, []int{2}
}

func (m *TemperatureAndHumidityReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TemperatureAndHumidityReply.Unmarshal(m, b)
}
func (m *TemperatureAndHumidityReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TemperatureAndHumidityReply.Marshal(b, m, deterministic)
}
func (m *TemperatureAndHumidityReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TemperatureAndHumidityReply.Merge(m, src)
}
func (m *TemperatureAndHumidityReply) XXX_Size() int {
	return xxx_messageInfo_TemperatureAndHumidityReply.Size(m)
}
func (m *TemperatureAndHumidityReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TemperatureAndHumidityReply.DiscardUnknown(m)
}

var xxx_messageInfo_TemperatureAndHumidityReply proto.InternalMessageInfo

func (m *TemperatureAndHumidityReply) GetThInfo() []*TemperatureAndHumidityInfo {
	if m != nil {
		return m.ThInfo
	}
	return nil
}

func (m *TemperatureAndHumidityReply) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*TemperatureAndHumidityRequest)(nil), "temperatureAndHumidityQuery.TemperatureAndHumidityRequest")
	proto.RegisterType((*TemperatureAndHumidityInfo)(nil), "temperatureAndHumidityQuery.TemperatureAndHumidityInfo")
	proto.RegisterType((*TemperatureAndHumidityReply)(nil), "temperatureAndHumidityQuery.TemperatureAndHumidityReply")
}

func init() { proto.RegisterFile("thq.proto", fileDescriptor_40cb4f8299f01d9c) }

var fileDescriptor_40cb4f8299f01d9c = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0xc9, 0x28, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x2e, 0x49, 0xcd, 0x2d, 0x48, 0x2d, 0x4a, 0x2c, 0x29,
	0x2d, 0x4a, 0x75, 0xcc, 0x4b, 0xf1, 0x28, 0xcd, 0xcd, 0x4c, 0xc9, 0x2c, 0xa9, 0x0c, 0x2c, 0x4d,
	0x2d, 0xaa, 0x54, 0xb2, 0xe6, 0x92, 0x0d, 0xc1, 0x2a, 0x1d, 0x94, 0x5a, 0x58, 0x9a, 0x5a, 0x5c,
	0x22, 0x24, 0xc5, 0xc5, 0x91, 0x92, 0x58, 0x92, 0x5a, 0x92, 0x99, 0x9b, 0x2a, 0xc1, 0xa8, 0xc0,
	0xa8, 0xc1, 0x19, 0x04, 0xe7, 0x2b, 0x95, 0x71, 0x49, 0x61, 0xd7, 0xec, 0x99, 0x97, 0x96, 0x2f,
	0xa4, 0xc0, 0xc5, 0x8d, 0x64, 0x33, 0x58, 0x33, 0x63, 0x10, 0xb2, 0x10, 0xc8, 0xec, 0x0c, 0xa8,
	0x0e, 0x09, 0x26, 0xb0, 0x34, 0x9c, 0x8f, 0x62, 0x2f, 0x33, 0x9a, 0xbd, 0x93, 0x18, 0xb9, 0xa4,
	0x71, 0xb9, 0xba, 0x20, 0xa7, 0x52, 0xc8, 0x9f, 0x8b, 0xad, 0x24, 0x03, 0xe4, 0x06, 0x09, 0x46,
	0x05, 0x66, 0x0d, 0x6e, 0x23, 0x73, 0x3d, 0x3c, 0x41, 0xa0, 0x87, 0xdb, 0x0b, 0x41, 0x50, 0x63,
	0x84, 0x94, 0xb8, 0x78, 0x52, 0x8b, 0x8a, 0xf2, 0x8b, 0x7c, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53,
	0xc1, 0x8e, 0xe5, 0x0c, 0x42, 0x11, 0x33, 0xda, 0xc5, 0xc8, 0xa5, 0x14, 0x82, 0xdb, 0x9a, 0xe0,
	0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0xa1, 0xc9, 0x8c, 0x5c, 0x92, 0xee, 0xa9, 0x25, 0xd8, 0x55,
	0x0a, 0x59, 0x91, 0xe1, 0x52, 0x68, 0x4c, 0x49, 0x59, 0x90, 0xa5, 0xb7, 0x20, 0xa7, 0x52, 0x89,
	0x21, 0x89, 0x0d, 0x9c, 0x54, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6c, 0xc3, 0xfa, 0xcc,
	0x37, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TemperatureAndHumidityQueryServiceClient is the client API for TemperatureAndHumidityQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TemperatureAndHumidityQueryServiceClient interface {
	// Sends a greeting
	GetTemperatureAndHumidity(ctx context.Context, in *TemperatureAndHumidityRequest, opts ...grpc.CallOption) (*TemperatureAndHumidityReply, error)
}

type temperatureAndHumidityQueryServiceClient struct {
	cc *grpc.ClientConn
}

func NewTemperatureAndHumidityQueryServiceClient(cc *grpc.ClientConn) TemperatureAndHumidityQueryServiceClient {
	return &temperatureAndHumidityQueryServiceClient{cc}
}

func (c *temperatureAndHumidityQueryServiceClient) GetTemperatureAndHumidity(ctx context.Context, in *TemperatureAndHumidityRequest, opts ...grpc.CallOption) (*TemperatureAndHumidityReply, error) {
	out := new(TemperatureAndHumidityReply)
	err := c.cc.Invoke(ctx, "/temperatureAndHumidityQuery.TemperatureAndHumidityQueryService/GetTemperatureAndHumidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemperatureAndHumidityQueryServiceServer is the server API for TemperatureAndHumidityQueryService service.
type TemperatureAndHumidityQueryServiceServer interface {
	// Sends a greeting
	GetTemperatureAndHumidity(context.Context, *TemperatureAndHumidityRequest) (*TemperatureAndHumidityReply, error)
}

// UnimplementedTemperatureAndHumidityQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTemperatureAndHumidityQueryServiceServer struct {
}

func (*UnimplementedTemperatureAndHumidityQueryServiceServer) GetTemperatureAndHumidity(ctx context.Context, req *TemperatureAndHumidityRequest) (*TemperatureAndHumidityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemperatureAndHumidity not implemented")
}

func RegisterTemperatureAndHumidityQueryServiceServer(s *grpc.Server, srv TemperatureAndHumidityQueryServiceServer) {
	s.RegisterService(&_TemperatureAndHumidityQueryService_serviceDesc, srv)
}

func _TemperatureAndHumidityQueryService_GetTemperatureAndHumidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemperatureAndHumidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemperatureAndHumidityQueryServiceServer).GetTemperatureAndHumidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temperatureAndHumidityQuery.TemperatureAndHumidityQueryService/GetTemperatureAndHumidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemperatureAndHumidityQueryServiceServer).GetTemperatureAndHumidity(ctx, req.(*TemperatureAndHumidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TemperatureAndHumidityQueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "temperatureAndHumidityQuery.TemperatureAndHumidityQueryService",
	HandlerType: (*TemperatureAndHumidityQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTemperatureAndHumidity",
			Handler:    _TemperatureAndHumidityQueryService_GetTemperatureAndHumidity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thq.proto",
}
