package main

import (
	"context"
	"log"
	"time"

	pb "Robot2019/dataServer/thermalImagingRendering/grpc"
	"google.golang.org/grpc"
)

func main() {
	/////////////////////////////////
	// Set up a connection to the server.
	address := "localhost:50061"
	testDataArray := []float64{23.75, 23.25, 22.75, 22.75, 23.25, 23.5, 23.75, 24.25, 20.5, 23.25, 24.75, 22.75, 26.0, 23.0, 10.75, 23.75, 22.5, 22.0, 23.0, 22.75, 23.0, 22.75, 23.25, 22.75, 22.0, 22.5, 22.25, 22.75, 22.75, 23.75, 23.25, 23.25, 22.0, 22.5, 22.5, 22.75, 23.0, 23.5, 23.5, 23.75, 22.0, 22.5, 22.75, 22.75, 22.75, 23.0, 22.5, 23.75, 22.25, 22.0, 22.5, 22.5, 23.0, 23.0, 23.25, 24.0, 22.0, 22.25, 22.0, 22.75, 23.5, 23.0, 23.5, 23.75,
		22.75, 23.25, 22.75, 23.25, 23.0, 23.0, 23.75, 23.25, 22.5, 23.0, 22.5, 22.75, 23.0, 23.0, 23.25, 23.25, 22.75, 22.75, 22.5, 22.75, 22.75, 22.75, 23.25, 23.5, 22.0, 22.5, 23.25, 22.5, 22.75, 23.25, 24.0, 23.75, 22.25, 22.5, 22.25, 23.25, 23.25, 23.5, 23.75, 24.25, 22.5, 22.5, 23.0, 22.75, 23.0, 23.25, 23.25, 23.5, 22.75, 22.75, 22.5, 23.0, 23.0, 23.0, 23.0, 23.5, 23.5, 23.0, 22.25, 25.0, 26.0, 26.0, 24.0, 24.25,
		26.0, 28.5, 27.25, 25.25, 25.0, 27.5, 30.5, 29.5, 25.0, 28.75, 29.5, 26.0, 25.0, 26.25, 30.25, 30.5, 26.0, 27.75, 30.25, 29.5, 25.25, 28.5, 30.0, 31.0, 27.25, 26.0, 30.5, 30.5, 27.25, 26.5, 29.0, 30.75, 29.25, 25.75, 29.75, 30.5, 30.0, 28.75, 29.75, 30.75, 30.0, 28.5, 26.75, 30.25, 30.75, 30.0, 29.25, 31.0, 30.0, 29.75, 27.5, 29.5, 30.75, 31.0, 30.5, 31.0, 28.0, 29.75, 29.25, 29.0, 30.75, 31.0, 30.75, 31.0,
		27.75, 27.25, 27.25, 27.0, 27.5, 29.75, 29.25, 30.25, 26.25, 27.25, 28.0, 29.25, 28.75, 29.5, 30.25, 30.0, 24.25, 24.5, 25.5, 27.0, 28.5, 29.5, 29.5, 30.0, 27.25, 26.0, 26.75, 26.75, 26.75, 29.0, 30.25, 30.25, 28.0, 29.0, 29.0, 29.75, 29.5, 29.75, 30.0, 30.0, 24.25, 25.0, 25.25, 26.0, 28.5, 29.75, 30.0, 29.5, 24.75, 23.75, 24.5, 24.75, 27.75, 29.75, 29.75, 29.5, 23.5, 23.75, 25.0, 28.25, 27.75, 27.0, 28.75, 30.0}

	conn, err := grpc.Dial(address, grpc.WithInsecure(), grpc.WithBlock())

	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	log.Printf("grpc.Dial OK!")
	defer conn.Close()

	c := pb.NewThermalImagingRenderingServiceClient(conn)

	// Contact the server and print out its response.
	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	log.Printf("context.WithTimeout() OK!")
	defer cancel()
	r, err := c.ThermalImagingRender(ctx, &pb.ThermalImagingRenderingRequest{
		DataArray: testDataArray,
		Height:    8,
		Width:     32,
		Filepath:  "/home/dkzhang/testTir",
		Filename:  "test001",
	})

	if err != nil {
		log.Fatalf("could not reply: %v", err)
	}
	log.Printf("reply = %v", r)
}
