// Code generated by protoc-gen-gitcode_go. DO NOT EDIT.
// source: tir.proto

package thermalImagingRendering

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the dataArray for the server to render.
// The ThermalImaging file with given name will be generated at the given path.
type ThermalImagingRenderingRequest struct {
	DataArray            []float64 `protobuf:"fixed64,1,rep,packed,name=dataArray,proto3" json:"dataArray,omitempty"`
	Height               int32     `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Width                int32     `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Filepath             string    `protobuf:"bytes,4,opt,name=filepath,proto3" json:"filepath,omitempty"`
	Filename             string    `protobuf:"bytes,5,opt,name=filename,proto3" json:"filename,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ThermalImagingRenderingRequest) Reset()         { *m = ThermalImagingRenderingRequest{} }
func (m *ThermalImagingRenderingRequest) String() string { return proto.CompactTextString(m) }
func (*ThermalImagingRenderingRequest) ProtoMessage()    {}
func (*ThermalImagingRenderingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_68df43f093d0eabe, []int{0}
}

func (m *ThermalImagingRenderingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ThermalImagingRenderingRequest.Unmarshal(m, b)
}
func (m *ThermalImagingRenderingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ThermalImagingRenderingRequest.Marshal(b, m, deterministic)
}
func (m *ThermalImagingRenderingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThermalImagingRenderingRequest.Merge(m, src)
}
func (m *ThermalImagingRenderingRequest) XXX_Size() int {
	return xxx_messageInfo_ThermalImagingRenderingRequest.Size(m)
}
func (m *ThermalImagingRenderingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ThermalImagingRenderingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ThermalImagingRenderingRequest proto.InternalMessageInfo

func (m *ThermalImagingRenderingRequest) GetDataArray() []float64 {
	if m != nil {
		return m.DataArray
	}
	return nil
}

func (m *ThermalImagingRenderingRequest) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ThermalImagingRenderingRequest) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *ThermalImagingRenderingRequest) GetFilepath() string {
	if m != nil {
		return m.Filepath
	}
	return ""
}

func (m *ThermalImagingRenderingRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

// The response message containing the errorMesage if any.
type ThermalImagingRenderingReply struct {
	ErrorMessage         string   `protobuf:"bytes,1,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ThermalImagingRenderingReply) Reset()         { *m = ThermalImagingRenderingReply{} }
func (m *ThermalImagingRenderingReply) String() string { return proto.CompactTextString(m) }
func (*ThermalImagingRenderingReply) ProtoMessage()    {}
func (*ThermalImagingRenderingReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_68df43f093d0eabe, []int{1}
}

func (m *ThermalImagingRenderingReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ThermalImagingRenderingReply.Unmarshal(m, b)
}
func (m *ThermalImagingRenderingReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ThermalImagingRenderingReply.Marshal(b, m, deterministic)
}
func (m *ThermalImagingRenderingReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThermalImagingRenderingReply.Merge(m, src)
}
func (m *ThermalImagingRenderingReply) XXX_Size() int {
	return xxx_messageInfo_ThermalImagingRenderingReply.Size(m)
}
func (m *ThermalImagingRenderingReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ThermalImagingRenderingReply.DiscardUnknown(m)
}

var xxx_messageInfo_ThermalImagingRenderingReply proto.InternalMessageInfo

func (m *ThermalImagingRenderingReply) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*ThermalImagingRenderingRequest)(nil), "thermalImagingRendering.ThermalImagingRenderingRequest")
	proto.RegisterType((*ThermalImagingRenderingReply)(nil), "thermalImagingRendering.ThermalImagingRenderingReply")
}

func init() { proto.RegisterFile("tir.proto", fileDescriptor_68df43f093d0eabe) }

var fileDescriptor_68df43f093d0eabe = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0xc9, 0x2c, 0xd2,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x2f, 0xc9, 0x48, 0x2d, 0xca, 0x4d, 0xcc, 0xf1, 0xcc,
	0x4d, 0x4c, 0xcf, 0xcc, 0x4b, 0x0f, 0x4a, 0xcd, 0x4b, 0x49, 0x2d, 0xca, 0xcc, 0x4b, 0x57, 0x5a,
	0xc2, 0xc8, 0x25, 0x17, 0x82, 0x5d, 0x2e, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x48, 0x86,
	0x8b, 0x33, 0x25, 0xb1, 0x24, 0xd1, 0xb1, 0xa8, 0x28, 0xb1, 0x52, 0x82, 0x51, 0x81, 0x59, 0x83,
	0x31, 0x08, 0x21, 0x20, 0x24, 0xc6, 0xc5, 0x96, 0x91, 0x9a, 0x99, 0x9e, 0x51, 0x22, 0xc1, 0xa4,
	0xc0, 0xa8, 0xc1, 0x1a, 0x04, 0xe5, 0x09, 0x89, 0x70, 0xb1, 0x96, 0x67, 0xa6, 0x94, 0x64, 0x48,
	0x30, 0x83, 0x85, 0x21, 0x1c, 0x21, 0x29, 0x2e, 0x8e, 0xb4, 0xcc, 0x9c, 0xd4, 0x82, 0xc4, 0x92,
	0x0c, 0x09, 0x16, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x38, 0x1f, 0x26, 0x97, 0x97, 0x98, 0x9b, 0x2a,
	0xc1, 0x8a, 0x90, 0x03, 0xf1, 0x95, 0x9c, 0xb8, 0x64, 0x70, 0xba, 0xb2, 0x20, 0xa7, 0x52, 0x48,
	0x89, 0x8b, 0x27, 0xb5, 0xa8, 0x28, 0xbf, 0xc8, 0x37, 0xb5, 0xb8, 0x38, 0x31, 0x3d, 0x55, 0x82,
	0x11, 0xac, 0x1f, 0x45, 0xcc, 0x68, 0x35, 0x6e, 0xaf, 0x06, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7,
	0x0a, 0x75, 0x30, 0x72, 0x89, 0x60, 0x53, 0x22, 0x64, 0xae, 0x87, 0x23, 0x00, 0xf5, 0xf0, 0x07,
	0x9e, 0x94, 0x29, 0xe9, 0x1a, 0x0b, 0x72, 0x2a, 0x95, 0x18, 0x92, 0xd8, 0xc0, 0x11, 0x67, 0x0c,
	0x08, 0x00, 0x00, 0xff, 0xff, 0x4c, 0xae, 0x4d, 0xe2, 0xc5, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ThermalImagingRenderingServiceClient is the client API for ThermalImagingRenderingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ThermalImagingRenderingServiceClient interface {
	// Using a dataArray to render a ThermalImaging file
	ThermalImagingRender(ctx context.Context, in *ThermalImagingRenderingRequest, opts ...grpc.CallOption) (*ThermalImagingRenderingReply, error)
}

type thermalImagingRenderingServiceClient struct {
	cc *grpc.ClientConn
}

func NewThermalImagingRenderingServiceClient(cc *grpc.ClientConn) ThermalImagingRenderingServiceClient {
	return &thermalImagingRenderingServiceClient{cc}
}

func (c *thermalImagingRenderingServiceClient) ThermalImagingRender(ctx context.Context, in *ThermalImagingRenderingRequest, opts ...grpc.CallOption) (*ThermalImagingRenderingReply, error) {
	out := new(ThermalImagingRenderingReply)
	err := c.cc.Invoke(ctx, "/thermalImagingRendering.ThermalImagingRenderingService/ThermalImagingRender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThermalImagingRenderingServiceServer is the server API for ThermalImagingRenderingService service.
type ThermalImagingRenderingServiceServer interface {
	// Using a dataArray to render a ThermalImaging file
	ThermalImagingRender(context.Context, *ThermalImagingRenderingRequest) (*ThermalImagingRenderingReply, error)
}

// UnimplementedThermalImagingRenderingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedThermalImagingRenderingServiceServer struct {
}

func (*UnimplementedThermalImagingRenderingServiceServer) ThermalImagingRender(ctx context.Context, req *ThermalImagingRenderingRequest) (*ThermalImagingRenderingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThermalImagingRender not implemented")
}

func RegisterThermalImagingRenderingServiceServer(s *grpc.Server, srv ThermalImagingRenderingServiceServer) {
	s.RegisterService(&_ThermalImagingRenderingService_serviceDesc, srv)
}

func _ThermalImagingRenderingService_ThermalImagingRender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThermalImagingRenderingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThermalImagingRenderingServiceServer).ThermalImagingRender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thermalImagingRendering.ThermalImagingRenderingService/ThermalImagingRender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThermalImagingRenderingServiceServer).ThermalImagingRender(ctx, req.(*ThermalImagingRenderingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ThermalImagingRenderingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "thermalImagingRendering.ThermalImagingRenderingService",
	HandlerType: (*ThermalImagingRenderingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ThermalImagingRender",
			Handler:    _ThermalImagingRenderingService_ThermalImagingRender_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tir.proto",
}
