# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import tir_pb2 as tir__pb2


class ThermalImagingRenderingServiceStub(object):
  """The ThermalImagingRendering service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ThermalImagingRender = channel.unary_unary(
        '/thermalImagingRendering.ThermalImagingRenderingService/ThermalImagingRender',
        request_serializer=tir__pb2.ThermalImagingRenderingRequest.SerializeToString,
        response_deserializer=tir__pb2.ThermalImagingRenderingReply.FromString,
        )


class ThermalImagingRenderingServiceServicer(object):
  """The ThermalImagingRendering service definition.
  """

  def ThermalImagingRender(self, request, context):
    """Using a dataArray to render a ThermalImaging file
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ThermalImagingRenderingServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ThermalImagingRender': grpc.unary_unary_rpc_method_handler(
          servicer.ThermalImagingRender,
          request_deserializer=tir__pb2.ThermalImagingRenderingRequest.FromString,
          response_serializer=tir__pb2.ThermalImagingRenderingReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'thermalImagingRendering.ThermalImagingRenderingService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
