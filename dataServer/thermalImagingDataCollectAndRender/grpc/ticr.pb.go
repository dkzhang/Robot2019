// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ticr.proto

package thermalImagingDataCollectAndRender

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing a tag for the server to log.
type ThermalImagingDataCollectAndRenderRequest struct {
	Tag                  string   `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ThermalImagingDataCollectAndRenderRequest) Reset() {
	*m = ThermalImagingDataCollectAndRenderRequest{}
}
func (m *ThermalImagingDataCollectAndRenderRequest) String() string { return proto.CompactTextString(m) }
func (*ThermalImagingDataCollectAndRenderRequest) ProtoMessage()    {}
func (*ThermalImagingDataCollectAndRenderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_038b35e563e2e911, []int{0}
}

func (m *ThermalImagingDataCollectAndRenderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ThermalImagingDataCollectAndRenderRequest.Unmarshal(m, b)
}
func (m *ThermalImagingDataCollectAndRenderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ThermalImagingDataCollectAndRenderRequest.Marshal(b, m, deterministic)
}
func (m *ThermalImagingDataCollectAndRenderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThermalImagingDataCollectAndRenderRequest.Merge(m, src)
}
func (m *ThermalImagingDataCollectAndRenderRequest) XXX_Size() int {
	return xxx_messageInfo_ThermalImagingDataCollectAndRenderRequest.Size(m)
}
func (m *ThermalImagingDataCollectAndRenderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ThermalImagingDataCollectAndRenderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ThermalImagingDataCollectAndRenderRequest proto.InternalMessageInfo

func (m *ThermalImagingDataCollectAndRenderRequest) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

// The response message containing the dataArray, and the errorMesage if any.
type ThermalImagingDataCollectAndRenderReply struct {
	Filepath             string   `protobuf:"bytes,1,opt,name=filepath,proto3" json:"filepath,omitempty"`
	Filename             string   `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	ErrorMessage         string   `protobuf:"bytes,3,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ThermalImagingDataCollectAndRenderReply) Reset() {
	*m = ThermalImagingDataCollectAndRenderReply{}
}
func (m *ThermalImagingDataCollectAndRenderReply) String() string { return proto.CompactTextString(m) }
func (*ThermalImagingDataCollectAndRenderReply) ProtoMessage()    {}
func (*ThermalImagingDataCollectAndRenderReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_038b35e563e2e911, []int{1}
}

func (m *ThermalImagingDataCollectAndRenderReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ThermalImagingDataCollectAndRenderReply.Unmarshal(m, b)
}
func (m *ThermalImagingDataCollectAndRenderReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ThermalImagingDataCollectAndRenderReply.Marshal(b, m, deterministic)
}
func (m *ThermalImagingDataCollectAndRenderReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThermalImagingDataCollectAndRenderReply.Merge(m, src)
}
func (m *ThermalImagingDataCollectAndRenderReply) XXX_Size() int {
	return xxx_messageInfo_ThermalImagingDataCollectAndRenderReply.Size(m)
}
func (m *ThermalImagingDataCollectAndRenderReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ThermalImagingDataCollectAndRenderReply.DiscardUnknown(m)
}

var xxx_messageInfo_ThermalImagingDataCollectAndRenderReply proto.InternalMessageInfo

func (m *ThermalImagingDataCollectAndRenderReply) GetFilepath() string {
	if m != nil {
		return m.Filepath
	}
	return ""
}

func (m *ThermalImagingDataCollectAndRenderReply) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *ThermalImagingDataCollectAndRenderReply) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*ThermalImagingDataCollectAndRenderRequest)(nil), "thermalImagingDataCollectAndRender.thermalImagingDataCollectAndRenderRequest")
	proto.RegisterType((*ThermalImagingDataCollectAndRenderReply)(nil), "thermalImagingDataCollectAndRender.thermalImagingDataCollectAndRenderReply")
}

func init() { proto.RegisterFile("ticr.proto", fileDescriptor_038b35e563e2e911) }

var fileDescriptor_038b35e563e2e911 = []byte{
	// 205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0xc9, 0x4c, 0x2e,
	0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x52, 0x2a, 0xc9, 0x48, 0x2d, 0xca, 0x4d, 0xcc, 0xf1,
	0xcc, 0x4d, 0x4c, 0xcf, 0xcc, 0x4b, 0x77, 0x49, 0x2c, 0x49, 0x74, 0xce, 0xcf, 0xc9, 0x49, 0x4d,
	0x2e, 0x71, 0xcc, 0x4b, 0x09, 0x4a, 0xcd, 0x4b, 0x49, 0x2d, 0x52, 0xb2, 0xe5, 0xd2, 0x24, 0xac,
	0x2a, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x48, 0x80, 0x8b, 0xb9, 0x24, 0x31, 0x5d, 0x82,
	0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xc4, 0x54, 0x6a, 0x65, 0xe4, 0x52, 0x27, 0x46, 0x7f, 0x41,
	0x4e, 0xa5, 0x90, 0x14, 0x17, 0x47, 0x5a, 0x66, 0x4e, 0x6a, 0x41, 0x62, 0x49, 0x06, 0xd4, 0x08,
	0x38, 0x1f, 0x26, 0x97, 0x97, 0x98, 0x9b, 0x2a, 0xc1, 0x84, 0x90, 0x03, 0xf1, 0x85, 0x94, 0xb8,
	0x78, 0x52, 0x8b, 0x8a, 0xf2, 0x8b, 0x7c, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53, 0x25, 0x98, 0xc1,
	0xf2, 0x28, 0x62, 0x46, 0xf7, 0x18, 0x89, 0xf1, 0x47, 0x70, 0x6a, 0x51, 0x59, 0x66, 0x72, 0xaa,
	0xd0, 0x06, 0x46, 0x2e, 0x01, 0x74, 0x39, 0x21, 0x5f, 0x3d, 0xc2, 0x06, 0xe8, 0x11, 0x1d, 0x56,
	0x52, 0xde, 0xd4, 0x32, 0xae, 0x20, 0xa7, 0x52, 0x89, 0x21, 0x89, 0x0d, 0x1c, 0xa5, 0xc6, 0x80,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x1c, 0xf5, 0x67, 0x3d, 0xe0, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ThermalImagingDataCollectAndRenderServiceClient is the client API for ThermalImagingDataCollectAndRenderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ThermalImagingDataCollectAndRenderServiceClient interface {
	// Using a dataArray to render a ThermalImaging file
	CollectAndRender(ctx context.Context, in *ThermalImagingDataCollectAndRenderRequest, opts ...grpc.CallOption) (*ThermalImagingDataCollectAndRenderReply, error)
}

type thermalImagingDataCollectAndRenderServiceClient struct {
	cc *grpc.ClientConn
}

func NewThermalImagingDataCollectAndRenderServiceClient(cc *grpc.ClientConn) ThermalImagingDataCollectAndRenderServiceClient {
	return &thermalImagingDataCollectAndRenderServiceClient{cc}
}

func (c *thermalImagingDataCollectAndRenderServiceClient) CollectAndRender(ctx context.Context, in *ThermalImagingDataCollectAndRenderRequest, opts ...grpc.CallOption) (*ThermalImagingDataCollectAndRenderReply, error) {
	out := new(ThermalImagingDataCollectAndRenderReply)
	err := c.cc.Invoke(ctx, "/thermalImagingDataCollectAndRender.thermalImagingDataCollectAndRenderService/CollectAndRender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThermalImagingDataCollectAndRenderServiceServer is the server API for ThermalImagingDataCollectAndRenderService service.
type ThermalImagingDataCollectAndRenderServiceServer interface {
	// Using a dataArray to render a ThermalImaging file
	CollectAndRender(context.Context, *ThermalImagingDataCollectAndRenderRequest) (*ThermalImagingDataCollectAndRenderReply, error)
}

// UnimplementedThermalImagingDataCollectAndRenderServiceServer can be embedded to have forward compatible implementations.
type UnimplementedThermalImagingDataCollectAndRenderServiceServer struct {
}

func (*UnimplementedThermalImagingDataCollectAndRenderServiceServer) CollectAndRender(ctx context.Context, req *ThermalImagingDataCollectAndRenderRequest) (*ThermalImagingDataCollectAndRenderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectAndRender not implemented")
}

func RegisterThermalImagingDataCollectAndRenderServiceServer(s *grpc.Server, srv ThermalImagingDataCollectAndRenderServiceServer) {
	s.RegisterService(&_ThermalImagingDataCollectAndRenderService_serviceDesc, srv)
}

func _ThermalImagingDataCollectAndRenderService_CollectAndRender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThermalImagingDataCollectAndRenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThermalImagingDataCollectAndRenderServiceServer).CollectAndRender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thermalImagingDataCollectAndRender.thermalImagingDataCollectAndRenderService/CollectAndRender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThermalImagingDataCollectAndRenderServiceServer).CollectAndRender(ctx, req.(*ThermalImagingDataCollectAndRenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ThermalImagingDataCollectAndRenderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "thermalImagingDataCollectAndRender.thermalImagingDataCollectAndRenderService",
	HandlerType: (*ThermalImagingDataCollectAndRenderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CollectAndRender",
			Handler:    _ThermalImagingDataCollectAndRenderService_CollectAndRender_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticr.proto",
}
