// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ti.proto

package thermalImaging

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing a tag for the server to log.
type ThermalImagingRequest struct {
	Tag                  string   `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ThermalImagingRequest) Reset()         { *m = ThermalImagingRequest{} }
func (m *ThermalImagingRequest) String() string { return proto.CompactTextString(m) }
func (*ThermalImagingRequest) ProtoMessage()    {}
func (*ThermalImagingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc797d52979d96d6, []int{0}
}

func (m *ThermalImagingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ThermalImagingRequest.Unmarshal(m, b)
}
func (m *ThermalImagingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ThermalImagingRequest.Marshal(b, m, deterministic)
}
func (m *ThermalImagingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThermalImagingRequest.Merge(m, src)
}
func (m *ThermalImagingRequest) XXX_Size() int {
	return xxx_messageInfo_ThermalImagingRequest.Size(m)
}
func (m *ThermalImagingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ThermalImagingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ThermalImagingRequest proto.InternalMessageInfo

func (m *ThermalImagingRequest) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

// The response message containing the dataArray, and the errorMesage if any.
type ThermalImagingReply struct {
	Filepath             string    `protobuf:"bytes,1,opt,name=filepath,proto3" json:"filepath,omitempty"`
	Filename             string    `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	DataArray            []float64 `protobuf:"fixed64,3,rep,packed,name=dataArray,proto3" json:"dataArray,omitempty"`
	Height               int32     `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	Width                int32     `protobuf:"varint,5,opt,name=width,proto3" json:"width,omitempty"`
	Level                string    `protobuf:"bytes,6,opt,name=level,proto3" json:"level,omitempty"`
	AnalysisReport       string    `protobuf:"bytes,7,opt,name=analysisReport,proto3" json:"analysisReport,omitempty"`
	ErrorMessage         string    `protobuf:"bytes,8,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ThermalImagingReply) Reset()         { *m = ThermalImagingReply{} }
func (m *ThermalImagingReply) String() string { return proto.CompactTextString(m) }
func (*ThermalImagingReply) ProtoMessage()    {}
func (*ThermalImagingReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc797d52979d96d6, []int{1}
}

func (m *ThermalImagingReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ThermalImagingReply.Unmarshal(m, b)
}
func (m *ThermalImagingReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ThermalImagingReply.Marshal(b, m, deterministic)
}
func (m *ThermalImagingReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThermalImagingReply.Merge(m, src)
}
func (m *ThermalImagingReply) XXX_Size() int {
	return xxx_messageInfo_ThermalImagingReply.Size(m)
}
func (m *ThermalImagingReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ThermalImagingReply.DiscardUnknown(m)
}

var xxx_messageInfo_ThermalImagingReply proto.InternalMessageInfo

func (m *ThermalImagingReply) GetFilepath() string {
	if m != nil {
		return m.Filepath
	}
	return ""
}

func (m *ThermalImagingReply) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *ThermalImagingReply) GetDataArray() []float64 {
	if m != nil {
		return m.DataArray
	}
	return nil
}

func (m *ThermalImagingReply) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ThermalImagingReply) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *ThermalImagingReply) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *ThermalImagingReply) GetAnalysisReport() string {
	if m != nil {
		return m.AnalysisReport
	}
	return ""
}

func (m *ThermalImagingReply) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*ThermalImagingRequest)(nil), "thermalImaging.thermalImagingRequest")
	proto.RegisterType((*ThermalImagingReply)(nil), "thermalImaging.thermalImagingReply")
}

func init() { proto.RegisterFile("ti.proto", fileDescriptor_fc797d52979d96d6) }

var fileDescriptor_fc797d52979d96d6 = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xcf, 0x4a, 0xfc, 0x30,
	0x10, 0x80, 0x7f, 0xfd, 0xd5, 0xd6, 0xee, 0x20, 0x8b, 0xc4, 0x55, 0xc2, 0xe2, 0xa1, 0x54, 0x94,
	0x7a, 0xe9, 0x41, 0x9f, 0x60, 0xf1, 0xe4, 0xc1, 0x4b, 0x7c, 0x82, 0x71, 0x3b, 0xb6, 0x81, 0xf4,
	0x8f, 0xe9, 0xb8, 0x52, 0xc1, 0x27, 0xf7, 0x22, 0xcd, 0xae, 0x2e, 0x2d, 0x82, 0xb7, 0x7c, 0xdf,
	0x7c, 0x24, 0x30, 0x81, 0x88, 0x75, 0xd6, 0xda, 0x86, 0x1b, 0x31, 0xe7, 0x92, 0x6c, 0x85, 0xe6,
	0xbe, 0xc2, 0x42, 0xd7, 0x45, 0x72, 0x0d, 0xa7, 0x63, 0xa3, 0xe8, 0xe5, 0x95, 0x3a, 0x16, 0xc7,
	0xe0, 0x33, 0x16, 0xd2, 0x8b, 0xbd, 0x74, 0xa6, 0x86, 0x63, 0xf2, 0xe9, 0xc1, 0xc9, 0xb4, 0x6d,
	0x4d, 0x2f, 0x96, 0x10, 0x3d, 0x6b, 0x43, 0x2d, 0x72, 0xb9, 0xcb, 0x7f, 0xf8, 0x7b, 0x56, 0x63,
	0x45, 0xf2, 0xff, 0x7e, 0x36, 0xb0, 0x38, 0x87, 0x59, 0x8e, 0x8c, 0x2b, 0x6b, 0xb1, 0x97, 0x7e,
	0xec, 0xa7, 0x9e, 0xda, 0x0b, 0x71, 0x06, 0x61, 0x49, 0xba, 0x28, 0x59, 0x1e, 0xc4, 0x5e, 0x1a,
	0xa8, 0x1d, 0x89, 0x05, 0x04, 0x6f, 0x3a, 0xe7, 0x52, 0x06, 0x4e, 0x6f, 0x61, 0xb0, 0x86, 0x36,
	0x64, 0x64, 0xe8, 0x1e, 0xd9, 0x82, 0xb8, 0x82, 0x39, 0xd6, 0x68, 0xfa, 0x4e, 0x77, 0x8a, 0xda,
	0xc6, 0xb2, 0x3c, 0x74, 0xe3, 0x89, 0x15, 0x09, 0x1c, 0x91, 0xb5, 0x8d, 0x7d, 0xa0, 0xae, 0xc3,
	0x82, 0x64, 0xe4, 0xaa, 0x91, 0xbb, 0xf9, 0x98, 0x2e, 0xea, 0x91, 0xec, 0x46, 0xaf, 0x49, 0xe4,
	0xb0, 0xb8, 0x6b, 0x8c, 0xa1, 0x35, 0x2b, 0xaa, 0x73, 0xb2, 0xab, 0xe1, 0xee, 0x77, 0x12, 0x97,
	0xd9, 0xb8, 0xcf, 0x7e, 0xdd, 0xf3, 0xf2, 0xe2, 0xaf, 0xac, 0x35, 0x7d, 0xf2, 0xef, 0x29, 0x74,
	0xdf, 0x77, 0xfb, 0x15, 0x00, 0x00, 0xff, 0xff, 0x48, 0xcc, 0xdb, 0xce, 0xca, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ThermalImagingServiceClient is the client API for ThermalImagingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ThermalImagingServiceClient interface {
	// Using a dataArray to render a ThermalImaging file
	CollectRenderAnalyze(ctx context.Context, in *ThermalImagingRequest, opts ...grpc.CallOption) (*ThermalImagingReply, error)
}

type thermalImagingServiceClient struct {
	cc *grpc.ClientConn
}

func NewThermalImagingServiceClient(cc *grpc.ClientConn) ThermalImagingServiceClient {
	return &thermalImagingServiceClient{cc}
}

func (c *thermalImagingServiceClient) CollectRenderAnalyze(ctx context.Context, in *ThermalImagingRequest, opts ...grpc.CallOption) (*ThermalImagingReply, error) {
	out := new(ThermalImagingReply)
	err := c.cc.Invoke(ctx, "/thermalImaging.thermalImagingService/CollectRenderAnalyze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThermalImagingServiceServer is the server API for ThermalImagingService service.
type ThermalImagingServiceServer interface {
	// Using a dataArray to render a ThermalImaging file
	CollectRenderAnalyze(context.Context, *ThermalImagingRequest) (*ThermalImagingReply, error)
}

// UnimplementedThermalImagingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedThermalImagingServiceServer struct {
}

func (*UnimplementedThermalImagingServiceServer) CollectRenderAnalyze(ctx context.Context, req *ThermalImagingRequest) (*ThermalImagingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectRenderAnalyze not implemented")
}

func RegisterThermalImagingServiceServer(s *grpc.Server, srv ThermalImagingServiceServer) {
	s.RegisterService(&_ThermalImagingService_serviceDesc, srv)
}

func _ThermalImagingService_CollectRenderAnalyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThermalImagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThermalImagingServiceServer).CollectRenderAnalyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thermalImaging.thermalImagingService/CollectRenderAnalyze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThermalImagingServiceServer).CollectRenderAnalyze(ctx, req.(*ThermalImagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ThermalImagingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "thermalImaging.thermalImagingService",
	HandlerType: (*ThermalImagingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CollectRenderAnalyze",
			Handler:    _ThermalImagingService_CollectRenderAnalyze_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ti.proto",
}
