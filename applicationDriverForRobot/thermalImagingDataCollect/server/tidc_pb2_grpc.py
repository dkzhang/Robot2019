# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import tidc_pb2 as tidc__pb2


class ThermalImagingDataCollectServiceStub(object):
  """The ThermalImagingDataCollect service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.CollectThermalImagingData = channel.unary_unary(
        '/thermalImagingDataCollect.ThermalImagingDataCollectService/CollectThermalImagingData',
        request_serializer=tidc__pb2.ThermalImagingDataCollectRequest.SerializeToString,
        response_deserializer=tidc__pb2.ThermalImagingDataCollectReply.FromString,
        )


class ThermalImagingDataCollectServiceServicer(object):
  """The ThermalImagingDataCollect service definition.
  """

  def CollectThermalImagingData(self, request, context):
    """Using a dataArray to render a ThermalImaging file
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ThermalImagingDataCollectServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'CollectThermalImagingData': grpc.unary_unary_rpc_method_handler(
          servicer.CollectThermalImagingData,
          request_deserializer=tidc__pb2.ThermalImagingDataCollectRequest.FromString,
          response_serializer=tidc__pb2.ThermalImagingDataCollectReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'thermalImagingDataCollect.ThermalImagingDataCollectService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
