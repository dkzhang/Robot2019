// Code generated by protoc-gen-gitcode_go. DO NOT EDIT.
// source: ll.proto

package laserLight

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Use true to Turn on the laser light, otherwise false.
type LaserLightRequest struct {
	TurnOn               bool     `protobuf:"varint,1,opt,name=TurnOn,proto3" json:"TurnOn,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LaserLightRequest) Reset()         { *m = LaserLightRequest{} }
func (m *LaserLightRequest) String() string { return proto.CompactTextString(m) }
func (*LaserLightRequest) ProtoMessage()    {}
func (*LaserLightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf68e6f8baaa0a1c, []int{0}
}

func (m *LaserLightRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LaserLightRequest.Unmarshal(m, b)
}
func (m *LaserLightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LaserLightRequest.Marshal(b, m, deterministic)
}
func (m *LaserLightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LaserLightRequest.Merge(m, src)
}
func (m *LaserLightRequest) XXX_Size() int {
	return xxx_messageInfo_LaserLightRequest.Size(m)
}
func (m *LaserLightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LaserLightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LaserLightRequest proto.InternalMessageInfo

func (m *LaserLightRequest) GetTurnOn() bool {
	if m != nil {
		return m.TurnOn
	}
	return false
}

// The response message containing the dataArray, and the errorMesage if any.
type LaserLightReply struct {
	ErrorMessage         string   `protobuf:"bytes,1,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LaserLightReply) Reset()         { *m = LaserLightReply{} }
func (m *LaserLightReply) String() string { return proto.CompactTextString(m) }
func (*LaserLightReply) ProtoMessage()    {}
func (*LaserLightReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf68e6f8baaa0a1c, []int{1}
}

func (m *LaserLightReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LaserLightReply.Unmarshal(m, b)
}
func (m *LaserLightReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LaserLightReply.Marshal(b, m, deterministic)
}
func (m *LaserLightReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LaserLightReply.Merge(m, src)
}
func (m *LaserLightReply) XXX_Size() int {
	return xxx_messageInfo_LaserLightReply.Size(m)
}
func (m *LaserLightReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LaserLightReply.DiscardUnknown(m)
}

var xxx_messageInfo_LaserLightReply proto.InternalMessageInfo

func (m *LaserLightReply) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*LaserLightRequest)(nil), "laserLight.LaserLightRequest")
	proto.RegisterType((*LaserLightReply)(nil), "laserLight.LaserLightReply")
}

func init() { proto.RegisterFile("ll.proto", fileDescriptor_bf68e6f8baaa0a1c) }

var fileDescriptor_bf68e6f8baaa0a1c = []byte{
	// 156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc8, 0xc9, 0xd1, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xca, 0x49, 0x2c, 0x4e, 0x2d, 0xf2, 0xc9, 0x4c, 0xcf, 0x28,
	0x51, 0xd2, 0xe6, 0x12, 0xf4, 0x81, 0xf3, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xc4,
	0xb8, 0xd8, 0x42, 0x4a, 0x8b, 0xf2, 0xfc, 0xf3, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x82, 0xa0,
	0x3c, 0x25, 0x53, 0x2e, 0x7e, 0x64, 0xc5, 0x05, 0x39, 0x95, 0x42, 0x4a, 0x5c, 0x3c, 0xa9, 0x45,
	0x45, 0xf9, 0x45, 0xbe, 0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x60, 0x0d, 0x9c, 0x41, 0x28, 0x62,
	0x46, 0xa9, 0xc8, 0x76, 0x04, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x0a, 0x05, 0x70, 0x09, 0x04,
	0x97, 0x67, 0x96, 0x24, 0x67, 0x20, 0xa4, 0x84, 0x64, 0xf5, 0x10, 0x2e, 0xd3, 0xc3, 0x70, 0x96,
	0x94, 0x34, 0x2e, 0xe9, 0x82, 0x9c, 0x4a, 0x25, 0x86, 0x24, 0x36, 0xb0, 0xef, 0x8c, 0x01, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xee, 0xb8, 0xdc, 0x03, 0xe9, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LaserLightServiceClient is the client API for LaserLightService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LaserLightServiceClient interface {
	// switch the laser light
	SwitchLaserLight(ctx context.Context, in *LaserLightRequest, opts ...grpc.CallOption) (*LaserLightReply, error)
}

type laserLightServiceClient struct {
	cc *grpc.ClientConn
}

func NewLaserLightServiceClient(cc *grpc.ClientConn) LaserLightServiceClient {
	return &laserLightServiceClient{cc}
}

func (c *laserLightServiceClient) SwitchLaserLight(ctx context.Context, in *LaserLightRequest, opts ...grpc.CallOption) (*LaserLightReply, error) {
	out := new(LaserLightReply)
	err := c.cc.Invoke(ctx, "/laserLight.LaserLightService/SwitchLaserLight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LaserLightServiceServer is the server API for LaserLightService service.
type LaserLightServiceServer interface {
	// switch the laser light
	SwitchLaserLight(context.Context, *LaserLightRequest) (*LaserLightReply, error)
}

// UnimplementedLaserLightServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLaserLightServiceServer struct {
}

func (*UnimplementedLaserLightServiceServer) SwitchLaserLight(ctx context.Context, req *LaserLightRequest) (*LaserLightReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchLaserLight not implemented")
}

func RegisterLaserLightServiceServer(s *grpc.Server, srv LaserLightServiceServer) {
	s.RegisterService(&_LaserLightService_serviceDesc, srv)
}

func _LaserLightService_SwitchLaserLight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaserLightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaserLightServiceServer).SwitchLaserLight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laserLight.LaserLightService/SwitchLaserLight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaserLightServiceServer).SwitchLaserLight(ctx, req.(*LaserLightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LaserLightService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "laserLight.LaserLightService",
	HandlerType: (*LaserLightServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SwitchLaserLight",
			Handler:    _LaserLightService_SwitchLaserLight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ll.proto",
}
